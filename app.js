/* Manhole Inspector PRO with exports */ 
window.App = (() => {
  const $ = (sel, el=document) => el.querySelector(sel);
  const $$ = (sel, el=document) => Array.from(el.querySelectorAll(sel));
  let deferredPrompt=null;
  window.addEventListener('beforeinstallprompt', (e)=>{e.preventDefault();deferredPrompt=e;$('#installBtn').hidden=false;});
  window.addEventListener('appinstalled', ()=>{$('#installBtn').hidden=true; deferredPrompt=null;});
  window.addEventListener('DOMContentLoaded', ()=>{ const ib=$('#installBtn'); if(ib) ib.addEventListener('click', async()=>{ if(deferredPrompt){ deferredPrompt.prompt(); await deferredPrompt.userChoice; deferredPrompt=null; ib.hidden=true; }}); $('#exportAllBtn').addEventListener('click', exportAllZip); });

  const DB_NAME='manhole_db', DB_VERSION=1, STORE='inspections'; let db;
  function idbOpen(){ return new Promise((res,rej)=>{ const req=indexedDB.open(DB_NAME,DB_VERSION); req.onupgradeneeded=(e)=>{ const db=e.target.result; if(!db.objectStoreNames.contains(STORE)) db.createObjectStore(STORE,{keyPath:'id'}); }; req.onsuccess=()=>res(req.result); req.onerror=()=>rej(req.error); }); }
  async function idb(){ return db || (db=await idbOpen()); }
  async function put(data){ const d=await idb(); return new Promise((res,rej)=>{ const tx=d.transaction(STORE,'readwrite'); tx.objectStore(STORE).put(data); tx.oncomplete=()=>res(); tx.onerror=()=>rej(tx.error); }); }
  async function getAll(){ const d=await idb(); return new Promise((res,rej)=>{ const tx=d.transaction(STORE,'readonly'); const r=tx.objectStore(STORE).getAll(); r.onsuccess=()=>res(r.result||[]); r.onerror=()=>rej(r.error); }); }
  async function getOne(id){ const d=await idb(); return new Promise((res,rej)=>{ const tx=d.transaction(STORE,'readonly'); const r=tx.objectStore(STORE).get(id); r.onsuccess=()=>res(r.result||null); r.onerror=()=>rej(r.error); }); }
  async function delRec(id){ const d=await idb(); return new Promise((res,rej)=>{ const tx=d.transaction(STORE,'readwrite'); tx.objectStore(STORE).delete(id); tx.oncomplete=()=>res(); tx.onerror=()=>rej(tx.error); }); }

  const uuid=()=>Math.random().toString(36).slice(2)+Date.now().toString(36);
  const todayISO=()=>new Date().toISOString().slice(0,10);
  const timeHM=()=>{const d=new Date(); return `${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}`;};
  const esc=(s)=> (s||'').replace(/[&<>]/g, c=> ({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));
  const toNumber=(v)=>{ const n=parseFloat(v); return isNaN(n)?null:n; };
  async function geolocateOnce(){ return new Promise((resolve)=>{ if(!navigator.geolocation) return resolve(null); navigator.geolocation.getCurrentPosition((pos)=>resolve({lat:pos.coords.latitude, lon:pos.coords.longitude, acc:pos.coords.accuracy}), ()=>resolve(null), {enableHighAccuracy:true, timeout:8000});}); }

  const blankInspection=async()=>({ id:uuid(), createdAt:new Date().toISOString(), date:todayISO(), time:timeHM(), inspector:"", siteCode:"", manholeId:"", location:await geolocateOnce(), accessCoverSize:"", accessType:"None", depthChamberInvert_m:null, connections:[], features:{penstock:false,flapValve:false,hawkeye:false,other:""}, systemType:"", observations:"", photos:{cover:null,label:null,inside:null}, sketchDataUrl:null });

  const view=$('#view'); $('#newBtn').addEventListener('click', async()=>showForm(await blankInspection())); $('#listBtn').addEventListener('click', showList);

  function chip(text){ return `<span class="tag">${text}</span>`; }

  function showList(){ view.innerHTML=`<section class="card"><h2 style="margin:0 0 8px">My Inspections</h2><p class="small">Tap item to open. Use <b>Export All</b> for project ZIP.</p><div id="list"></div></section>`; refreshList(); }
  async function refreshList(){ const items=(await getAll()).sort((a,b)=>(b.createdAt||'').localeCompare(a.createdAt||'')); const list=$('#list'); if(!items.length){ list.innerHTML=`<p class="small">No inspections yet. Tap <b>New</b> to begin.</p>`; return; } list.innerHTML=items.map(i=>`<div class="card"><div class="kv"><span><b>${esc(i.siteCode||'—')}</b> • ${esc(i.manholeId||'No ID')}</span><span class="badge">${(i.date||'').replaceAll('-','/')} ${i.time||''}</span></div><div class="small">Inspector: ${esc(i.inspector||'—')} • ${i.location?chip(i.location.lat.toFixed(6)+', '+i.location.lon.toFixed(6)+' ±'+Math.round(i.location.acc)+'m'):chip('no GPS')}</div><div class="list-actions"><button class="viewBtn" data-id="${i.id}">Open</button><button class="reportBtn" data-id="${i.id}">Report</button><button class="danger delBtn" data-id="${i.id}">Delete</button></div></div>`).join(''); $$('.viewBtn',list).forEach(b=>b.addEventListener('click', async e=>showForm(await getOne(e.currentTarget.dataset.id)))); $$('.reportBtn',list).forEach(b=>b.addEventListener('click', async e=>showReport(await getOne(e.currentTarget.dataset.id)))); $$('.delBtn',list).forEach(b=>b.addEventListener('click', async e=>{ await delRec(e.currentTarget.dataset.id); refreshList(); })); }

  function fileToDataURL(file){ return new Promise((resolve,reject)=>{ const reader=new FileReader(); reader.onload=()=>resolve(reader.result); reader.onerror=reject; reader.readAsDataURL(file); }); }
  function sketch(canvas){ const ctx=canvas.getContext('2d'); let drawing=false,last=null; const DPR=window.devicePixelRatio||1; function resize(){ const {width,height}=canvas.getBoundingClientRect(); canvas.width=Math.floor(width*DPR); canvas.height=Math.floor(height*DPR); ctx.setTransform(DPR,0,0,DPR,0,0); ctx.lineCap='round'; ctx.lineJoin='round'; ctx.lineWidth=2; ctx.strokeStyle='#9CA3AF'; ctx.fillStyle='#0e1624'; ctx.fillRect(0,0,canvas.width,canvas.height);} resize(); window.addEventListener('resize',resize); const pos=e=>{ const rect=canvas.getBoundingClientRect(); const pt=e.touches?e.touches[0]:e; return {x:pt.clientX-rect.left, y:pt.clientY-rect.top};}; const start=e=>{drawing=true; last=pos(e);}; const move=e=>{ if(!drawing) return; const p=pos(e); ctx.beginPath(); ctx.moveTo(last.x,last.y); ctx.lineTo(p.x,p.y); ctx.stroke(); last=p; }; const end=()=>{drawing=false; last=null;}; canvas.addEventListener('touchstart',start,{passive:true}); canvas.addEventListener('touchmove',move,{passive:true}); canvas.addEventListener('touchend',end); canvas.addEventListener('mousedown',start); canvas.addEventListener('mousemove',move); canvas.addEventListener('mouseup',end); return { toDataURL:()=>canvas.toDataURL('image/png'), clear:()=>{ ctx.fillStyle='#0e1624'; ctx.fillRect(0,0,canvas.width,canvas.height);} }; }

  async function showForm(data){ const existing=!!data?.id; if(!data) data=await blankInspection(); view.innerHTML=`<form class="card grid" id="inspectionForm" autocomplete="off">
    <div class="grid cols-2"><div><label>Date</label><input type="date" id="date" value="${data.date||todayISO()}"></div><div><label>Time</label><input type="time" id="time" value="${data.time||timeHM()}"></div></div>
    <div class="grid cols-2"><div><label>Inspector</label><input type="text" id="inspector" value="${esc(data.inspector)||''}" placeholder="Your name"></div><div><label>Site Code / Job</label><input type="text" id="siteCode" value="${esc(data.siteCode)||''}" placeholder="e.g. SW-023"></div></div>
    <div class="grid cols-2"><div><label>Manhole ID</label><input type="text" id="manholeId" value="${esc(data.manholeId)||''}" placeholder="e.g. MH-12"></div><div><label>System Type</label><input type="text" id="systemType" value="${esc(data.systemType)||''}" placeholder="e.g. road drainage"></div></div>
    <fieldset><legend>Location</legend><div class="grid cols-3"><div><label>Latitude</label><input type="text" id="lat" value="${data.location?.lat ?? ''}" placeholder="auto"></div><div><label>Longitude</label><input type="text" id="lon" value="${data.location?.lon ?? ''}" placeholder="auto"></div><div><label>Accuracy (m)</label><input type="text" id="acc" value="${data.location?.acc ?? ''}" placeholder="auto"></div></div><div class="row"><button type="button" id="locateBtn">Use Current Location</button><span class="small">High accuracy may take a few seconds outdoors.</span></div></fieldset>
    <fieldset><legend>Access</legend><div class="grid cols-3"><div><label>Access Cover Size</label><input type="text" id="accessCoverSize" value="${esc(data.accessCoverSize)||''}" placeholder="e.g. 600x600"></div><div><label>Access Type</label><select id="accessType"><option ${data.accessType==='None'?'selected':''}>None</option><option ${data.accessType==='Ladder'?'selected':''}>Ladder</option><option ${data.accessType==='Step-irons'?'selected':''}>Step-irons</option></select></div><div><label>Depth to Chamber Invert (m)</label><input type="number" step="0.01" id="depthChamberInvert_m" value="${data.depthChamberInvert_m ?? ''}"></div></div></fieldset>
    <fieldset id="pipesFieldset"><legend>Pipe Connections</legend><div id="pipesContainer"></div><div class="row"><button type="button" id="addPipeBtn">Add Pipe</button><span class="small">Angles optional; degrees from North.</span></div></fieldset>
    <fieldset><legend>Features within Chamber</legend><div class="row"><label><input type="checkbox" id="feat_penstock" ${data.features?.penstock?'checked':''}> Penstock</label><label><input type="checkbox" id="feat_flapValve" ${data.features?.flapValve?'checked':''}> Flap-valve</label><label><input type="checkbox" id="feat_hawkeye" ${data.features?.hawkeye?'checked':''}> Hawk-eye</label></div><label>Other</label><input type="text" id="feat_other" value="${esc(data.features?.other)||''}" placeholder="e.g. flow meter"></fieldset>
    <fieldset><legend>Photos</legend><div class="grid cols-3">
      <div><label>Access Cover</label><div class="media-thumb" id="thumb_cover">${data.photos?.cover?`<img src="${data.photos.cover}">`:'No photo'}</div><input type="file" accept="image/*" capture="environment" id="photo_cover"></div>
      <div><label>Labels / Surroundings</label><div class="media-thumb" id="thumb_label">${data.photos?.label?`<img src="${data.photos.label}">`:'No photo'}</div><input type="file" accept="image/*" capture="environment" id="photo_label"></div>
      <div><label>Inside Chamber</label><div class="media-thumb" id="thumb_inside">${data.photos?.inside?`<img src="${data.photos.inside}">`:'No photo'}</div><input type="file" accept="image/*" capture="environment" id="photo_inside"></div>
    </div></fieldset>
    <fieldset><legend>Plan Sketch</legend><canvas id="sketch"></canvas><div class="row"><button type="button" id="clearSketchBtn">Clear Sketch</button></div></fieldset>
    <label>Observations</label><textarea id="observations" placeholder="Notes, hazards, system if known"></textarea>
    <div class="row" style="justify-content:flex-end; gap: 8px;">${existing?'<button type="button" id="reportBtn">Report</button>':''}<button type="submit" class="primary">Save</button></div>
  </form>`;
    $('#inspector').value=data.inspector||''; $('#siteCode').value=data.siteCode||''; $('#manholeId').value=data.manholeId||''; $('#systemType').value=data.systemType||''; $('#observations').value=data.observations||'';
    $('#locateBtn').addEventListener('click', async()=>{ const loc=await geolocateOnce(); if(loc){ $('#lat').value=loc.lat; $('#lon').value=loc.lon; $('#acc').value=Math.round(loc.acc);} else alert('Location unavailable.');});
    const pipes=data.connections||[]; const container=$('#pipesContainer');
    const renderPipes=()=>{ container.innerHTML=pipes.map((p,idx)=>`<div class="card"><div class="grid cols-3"><div><label>Position (°)</label><input type="number" step="1" data-idx="${idx}" data-key="positionDeg" value="${p.positionDeg ?? ''}"></div><div><label>Depth to Invert (m)</label><input type="number" step="0.01" data-idx="${idx}" data-key="depthInvert_m" value="${p.depthInvert_m ?? ''}"></div><div><label>Diameter (mm)</label><input type="number" step="1" data-idx="${idx}" data-key="pipeDiameter_mm" value="${p.pipeDiameter_mm ?? ''}"></div></div><label>Notes</label><input type="text" data-idx="${idx}" data-key="notes" value="${p.notes||''}"><div class="row" style="justify-content:flex-end"><button type="button" class="danger" data-del="${idx}">Remove</button></div></div>`).join(''); $$('.card input[data-key]',container).forEach(inp=>inp.addEventListener('input',(e)=>{ const i=Number(e.target.dataset.idx); const k=e.target.dataset.key; const v=e.target.type==='number'?parseFloat(e.target.value):e.target.value; pipes[i][k]=isNaN(v)?null:v; if(e.target.type!=='number') pipes[i][k]=e.target.value; })); $$('button[data-del]',container).forEach(btn=>btn.addEventListener('click',(e)=>{ pipes.splice(Number(e.currentTarget.dataset.del),1); renderPipes(); })); };
    $('#addPipeBtn').addEventListener('click',()=>{ pipes.push({positionDeg:null, depthInvert_m:null, pipeDiameter_mm:null, notes:""}); renderPipes(); }); renderPipes();
    ['cover','label','inside'].forEach(kind=>{ const input=$('#photo_'+kind); const thumb=$('#thumb_'+kind); input.addEventListener('change', async()=>{ const f=input.files&&input.files[0]; if(f){ const dataUrl=await fileToDataURL(f); data.photos=data.photos||{}; data.photos[kind]=dataUrl; thumb.innerHTML=`<img src="${dataUrl}">`; } }); });
    const sk=sketch($('#sketch')); if(data.sketchDataUrl){ const img=new Image(); img.onload=()=>{ const cnv=$('#sketch'); const ctx=cnv.getContext('2d'); ctx.drawImage(img,0,0,cnv.width,cnv.height); }; img.src=data.sketchDataUrl; } $('#clearSketchBtn').addEventListener('click',()=>sk.clear());
    const reportBtn=$('#reportBtn'); if(reportBtn) reportBtn.addEventListener('click',()=>showReport(collect()));
    $('#inspectionForm').addEventListener('submit', async(e)=>{ e.preventDefault(); const rec=collect(); await put(rec); alert('Saved.'); showList(); });
    function collect(){ return { ...data, date:$('#date').value, time:$('#time').value, inspector:$('#inspector').value.trim(), siteCode:$('#siteCode').value.trim(), manholeId:$('#manholeId').value.trim(), systemType:$('#systemType').value.trim(), location:{lat:toNumber($('#lat').value), lon:toNumber($('#lon').value), acc:toNumber($('#acc').value)}, accessCoverSize:$('#accessCoverSize').value.trim(), accessType:$('#accessType').value, depthChamberInvert_m:toNumber($('#depthChamberInvert_m').value), connections:pipes, features:{penstock:$('#feat_penstock').checked, flapValve:$('#feat_flapValve').checked, hawkeye:$('#feat_hawkeye').checked, other:$('#feat_other').value.trim()}, photos:data.photos||{cover:null,label:null,inside:null}, sketchDataUrl:sk.toDataURL(), observations:$('#observations').value.trim() }; }
  }

  function showReport(rec){ const loc=rec.location?`${rec.location.lat?.toFixed?.(6) ?? '—'}, ${rec.location.lon?.toFixed?.(6) ?? '—'} (±${rec.location.acc ?? '—'} m)`:'—'; const feat=[rec.features?.penstock?'Penstock':null,rec.features?.flapValve?'Flap-valve':null,rec.features?.hawkeye?'Hawk-eye':null,rec.features?.other?rec.features.other:null].filter(Boolean).join(', ')||'None';
    view.innerHTML=`<section class="card"><h2>Inspection Report</h2><div class="grid cols-2">
      <div class="kv"><span>Date</span><b>${rec.date||'—'} ${rec.time||''}</b></div><div class="kv"><span>Inspector</span><b>${esc(rec.inspector)||'—'}</b></div>
      <div class="kv"><span>Site/Job</span><b>${esc(rec.siteCode)||'—'}</b></div><div class="kv"><span>Manhole ID</span><b>${esc(rec.manholeId)||'—'}</b></div>
      <div class="kv"><span>System</span><b>${esc(rec.systemType)||'—'}</b></div><div class="kv"><span>Location</span><b>${loc}</b></div>
      <div class="kv"><span>Access Cover Size</span><b>${esc(rec.accessCoverSize)||'—'}</b></div><div class="kv"><span>Access Type</span><b>${esc(rec.accessType)||'—'}</b></div>
      <div class="kv"><span>Depth to Chamber Invert (m)</span><b>${rec.depthChamberInvert_m ?? '—'}</b></div><div class="kv"><span>Features</span><b>${feat}</b></div>
    </div>
    <h3>Pipe Connections</h3>${rec.connections?.length?`<table><thead><tr><th>Position (°)</th><th>Depth to Invert (m)</th><th>Diameter (mm)</th><th>Notes</th></tr></thead><tbody>${rec.connections.map(p=>`<tr><td>${p.positionDeg ?? '—'}</td><td>${p.depthInvert_m ?? '—'}</td><td>${p.pipeDiameter_mm ?? '—'}</td><td>${esc(p.notes||'—')}</td></tr>`).join('')}</tbody></table>`:'<p class="small">No pipe connections recorded.</p>'}
    <h3>Photos</h3><div class="grid cols-3"><div>${rec.photos?.cover?`<img class="media-thumb" src="${rec.photos.cover}">`:'<div class="media-thumb">No photo</div>'}</div><div>${rec.photos?.label?`<img class="media-thumb" src="${rec.photos.label}">`:'<div class="media-thumb">No photo</div>'}</div><div>${rec.photos?.inside?`<img class="media-thumb" src="${rec.photos.inside}">`:'<div class="media-thumb">No photo</div>'}</div></div>
    <h3>Observations</h3><p>${esc(rec.observations||'—')}</p>
    <div class="row" style="justify-content:flex-end; gap:8px; margin-top:12px;">
      <button id="csvBtn">Export CSV</button><button id="jsonBtn">Export JSON</button><button id="geoBtn">Export GeoJSON</button><button id="zipBtn">Full ZIP</button><button id="printBtn">Print / PDF</button><button id="backBtn">Back</button>
    </div></section>`;
    $('#printBtn').addEventListener('click',()=>window.print()); $('#backBtn').addEventListener('click',showList);
    $('#csvBtn').addEventListener('click',()=>downloadBlob(makeCSV([rec]),`inspection_${rec.manholeId||'mh'}_${rec.date}.csv`,'text/csv'));
    $('#jsonBtn').addEventListener('click',()=>downloadBlob(new Blob([JSON.stringify(rec,null,2)],{type:'application/json'}),`inspection_${rec.manholeId||'mh'}_${rec.date}.json`,'application/json'));
    $('#geoBtn').addEventListener('click',()=>{ const gj=makeGeoJSON([rec]); downloadBlob(new Blob([JSON.stringify(gj,null,2)],{type:'application/geo+json'}),`inspection_${rec.manholeId||'mh'}_${rec.date}.geojson`,'application/geo+json'); });
    $('#zipBtn').addEventListener('click',()=>exportZipFor([rec],`inspection_${rec.manholeId||'mh'}_${rec.date}.zip`));
  }

  function makeCSV(records){ const headers=['SiteCode','ManholeID','Date','Time','Inspector','Lat','Lon','GPS_Accuracy_m','AccessCoverSize','AccessType','DepthChamberInvert_m','SystemType','Features','Observations','Conn#','Conn_Position_deg','Conn_DepthInvert_m','Conn_Diameter_mm','Conn_Notes']; const rows=[]; records.forEach(rec=>{ const feat=[rec.features?.penstock?'Penstock':null,rec.features?.flapValve?'Flap-valve':null,rec.features?.hawkeye?'Hawk-eye':null,rec.features?.other||null].filter(Boolean).join(' | '); if(rec.connections?.length){ rec.connections.forEach((c,idx)=>{ rows.push([esc(rec.siteCode||''),esc(rec.manholeId||''),rec.date||'',rec.time||'',esc(rec.inspector||''),rec.location?.lat??'',rec.location?.lon??'',rec.location?.acc??'',esc(rec.accessCoverSize||''),esc(rec.accessType||''),rec.depthChamberInvert_m??'',esc(rec.systemType||''),esc(feat||''),esc(rec.observations||''),idx+1,c.positionDeg??'',c.depthInvert_m??'',c.pipeDiameter_mm??'',(c.notes||'').replace(/[\r\n]+/g,' ')]); }); } else { rows.push([esc(rec.siteCode||''),esc(rec.manholeId||''),rec.date||'',rec.time||'',esc(rec.inspector||''),rec.location?.lat??'',rec.location?.lon??'',rec.location?.acc??'',esc(rec.accessCoverSize||''),esc(rec.accessType||''),rec.depthChamberInvert_m??'',esc(rec.systemType||''),esc(feat||''),esc(rec.observations||''),'','','','','']); }}); const csv=[headers.join(','), ...rows.map(r=>r.map(cell=>`"${String(cell).replace(/"/g,'""')}"`).join(','))].join('\n'); return new Blob([csv],{type:'text/csv'}); }
  function makeGeoJSON(records){ return { type:'FeatureCollection', features:records.filter(r=>r.location && typeof r.location.lat==='number' && typeof r.location.lon==='number').map(rec=>({ type:'Feature', geometry:{type:'Point', coordinates:[rec.location.lon, rec.location.lat]}, properties:{ siteCode:rec.siteCode, manholeId:rec.manholeId, date:rec.date, time:rec.time, inspector:rec.inspector, systemType:rec.systemType, accessType:rec.accessType, depthChamberInvert_m:rec.depthChamberInvert_m } })) }; }
  function downloadBlob(blob,filename){ const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=filename; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); }
  async function exportZipFor(records, zipName='manholes.zip'){ const zip=new JSZip(); zip.file('data/inspections.csv', await blobText(makeCSV(records))); zip.file('data/inspections.geojson', JSON.stringify(makeGeoJSON(records),null,2)); zip.file('data/inspections.json', JSON.stringify(records,null,2)); for(const rec of records){ const base=`records/${sanitize(rec.siteCode||'site')}_${sanitize(rec.manholeId||'mh')}_${rec.date}`; zip.file(`${base}/record.json`, JSON.stringify(rec,null,2)); for(const k of ['cover','label','inside']){ const d=rec.photos?.[k]; if(d) zip.file(`${base}/photo_${k}.png`, dataURLtoUint8(d)); } if(rec.sketchDataUrl) zip.file(`${base}/sketch.png`, dataURLtoUint8(rec.sketchDataUrl)); zip.file(`${base}/record.csv`, await blobText(makeCSV([rec]))); } const blob=await zip.generateAsync({type:'blob'}); downloadBlob(blob, zipName); }
  async function exportAllZip(){ const recs=await getAll(); if(!recs.length) return alert('No inspections to export.'); await exportZipFor(recs, `manhole_project_export_${new Date().toISOString().slice(0,10)}.zip`); }
  function dataURLtoUint8(d){ const b64=d.split(',')[1]; const bin=atob(b64); const len=bin.length; const arr=new Uint8Array(len); for(let i=0;i<len;i++) arr[i]=bin.charCodeAt(i); return arr; }
  async function blobText(blob){ return await new Response(blob).text(); }
  function sanitize(s){ return String(s).replace(/[^a-z0-9_\-]+/gi,'_').slice(0,80); }

  if('serviceWorker' in navigator) window.addEventListener('load', ()=>navigator.serviceWorker.register('./sw.js'));
  return { showList, showForm, showReport };
})();
